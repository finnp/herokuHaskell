name: lens
version: 4.1.2.1
id: lens-4.1.2.1-e0e7e4b0c54ce2a612d8bfaca711b476
license: BSD3
copyright: Copyright (C) 2012-2014 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/4fHw3Fd.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Codec.Compression.Zlib.Lens Control.Exception.Lens
                 Control.Lens Control.Lens.Action Control.Lens.At
                 Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
                 Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
                 Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
                 Control.Lens.Internal Control.Lens.Internal.Action
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Context Control.Lens.Internal.Deque
                 Control.Lens.Internal.Exception Control.Lens.Internal.Fold
                 Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
                 Control.Lens.Internal.Instances Control.Lens.Internal.Iso
                 Control.Lens.Internal.Level Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Reflection
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Loupe Control.Lens.Operators Control.Lens.Plated
                 Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
                 Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
                 Control.Lens.Tuple Control.Lens.Type Control.Lens.Wrapped
                 Control.Lens.Zoom Control.Monad.Error.Lens
                 Control.Monad.Primitive.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Aeson.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.List.Split.Lens Data.Map.Lens Data.Sequence.Lens Data.Set.Lens
                 Data.Text.Lens Data.Text.Strict.Lens Data.Text.Lazy.Lens
                 Data.Tree.Lens Data.Typeable.Lens Data.Vector.Lens
                 Data.Vector.Generic.Lens Generics.Deriving.Lens GHC.Generics.Lens
                 System.Exit.Lens System.FilePath.Lens System.IO.Error.Lens
                 Language.Haskell.TH.Lens Numeric.Lens
hidden-modules: Control.Lens.Internal.TupleIxedTH
trusted: False
import-dirs: /Users/finn/code/haskell/herokuHaskell/.cabal-sandbox/lib/x86_64-osx-ghc-7.6.3/lens-4.1.2.1
library-dirs: /Users/finn/code/haskell/herokuHaskell/.cabal-sandbox/lib/x86_64-osx-ghc-7.6.3/lens-4.1.2.1
hs-libraries: HSlens-4.1.2.1
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: aeson-0.7.0.6-3c5ecda2c8c0d8788a779b70e941393f
         array-0.4.0.1-3b78425c10ff2dad7acf7e8c8ae014c3
         base-4.6.0.1-6c351d70a24d3e96f315cba68f3acf57
         bifunctors-4.1.1.1-d874ee967c08d91ab18cd6c553970961
         bytestring-0.10.0.2-bf7aaeef3f644374cd7d5a9066cd9017
         comonad-4.2-35df7a8fdaf6d91088a96dea9d97cfba
         containers-0.5.0.0-ab1dae9a94cd3cc84e7b2805636ebfa2
         contravariant-0.6-1be0f858afa88e1af74d9fce4877069e
         distributive-0.4.4-f35281d827800032c5fe74c053ad0474
         exceptions-0.6.1-8e5077c2798c04f83b07b29e8f8aa7dc
         filepath-1.3.0.1-b12cbe18566fe1532a1fda4c85e31cbe
         free-4.9-8466eb4415712b73a4f770496b7096b2
         ghc-prim-0.3.0.0-d5221a8c8a269b66ab9a07bdc23317dd
         hashable-1.1.2.5-e0f2541518f84d3123a819112b4ffe20
         mtl-2.1.2-94c72af955e94b8d7b2f359dadd0cb62
         parallel-3.2.0.3-d6c020cb3aa15c71f5f29c0db359fd39
         primitive-0.5.0.1-8e5f40b409f7bb31ae1acfb125279700
         profunctors-4.0.4-70ca5c012cfbf3c92d7dc9256da21caa
         reflection-1.4-59f99121e5a30d4841518e6b3345f9ed
         scientific-0.3.2.1-0e64973eb16ba49375c4554d354813f5
         semigroupoids-4.0.2.1-50bee11d7416fdc6a249c34f75db4cd7
         semigroups-0.15.1-252ad7a0fc304fdb2fb03329f3f242ef
         split-0.2.2-9ce33138f4fcfb9c37f6e6c300bcc367
         tagged-0.7.2-35178383c175a0eaa905b0ea9826a924
         template-haskell-2.8.0.0-c2c1b21dbbb37ace4b7dc26c966ec664
         text-0.11.3.1-e102568e5179d6e017c36f66eb827474
         transformers-0.3.0.0-ff2bb6ac67241ebb987351a3db564af0
         transformers-compat-0.3.3.3-7f010deaa1c7d3cf38737cc8597504c8
         unordered-containers-0.2.3.0-0c97b996fdef28eec3dc4758b57f023b
         utf8-string-0.3.8-51af3e34c6132db80191994bb889fe85
         vector-0.10.0.1-c08d8d1f9706ca71ca433f9f5ecce7e3
         void-0.6.1-7211e45db357381e0d2ebaf7330aabc6
         zlib-0.5.4.1-13ba81ac0d7e6f3bdf1ee5ddce4e9aab
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /Users/finn/code/haskell/herokuHaskell/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.6.3/lens-4.1.2.1/html/lens.haddock
haddock-html: /Users/finn/code/haskell/herokuHaskell/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.6.3/lens-4.1.2.1/html
